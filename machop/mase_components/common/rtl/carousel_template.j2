module carousel_template #(
    {% for width in register_widths -%}
    parameter int WIDTH_{{ loop.index0 }} = {{ width }},
    {% endfor -%}
    parameter int BUFFER_SIZE = {{buffer_size}}
) (
    //TODO 
    //TODO: ADD WHEN SHIFTING, HOW TO GO BACK TO IDLE, next state should do this in always comb, but idk why it doesn't next state stays on shifting, it may be because i made the state_t supposedly 1 bit but it appears weirdly on the gtkwave. idk
    //TODO

    //data ports
    {%- for i in range(0, buffer_size) %}
    input logic [WIDTH_{{ i }} - 1 : 0] data_in_{{ i }},
    output logic [WIDTH_{{ i }} - 1 : 0] data_out_{{ i }},
    input logic  data_in_valid_{{ i }},
    output logic data_in_ready_{{ i }},
    input logic data_out_ready_{{ i }},
    output logic data_out_valid_{{ i }},
    {%- endfor %}
    
    input logic clk,
    input logic rst
);

  {% for i in range(0, buffer_size) -%}  
  logic [WIDTH_{{i}} - 1 : 0] register_{{i}};
  {% endfor %}

  logic [BUFFER_SIZE - 1 : 0] data_in_valid_arr, data_in_ready_arr, data_out_ready_arr, data_out_valid_arr;

  // packing data control signals
  {%- for i in range(0, buffer_size) %}  
  assign data_in_valid_arr[{{i}}] = data_in_valid_{{i}};
  assign data_out_valid_{{i}} = data_out_valid_arr[{{i}}];
  assign data_in_ready_{{i}} = data_in_ready_arr[{{i}}];
  assign data_out_ready_arr[{{i}}] = data_out_ready_{{i}};
  {% endfor %}

  logic [BUFFER_SIZE - 1 : 0] ingested;
  logic [BUFFER_SIZE - 1 : 0] dispensed;
  logic [BUFFER_SIZE - 1 : 0] holding;

  typedef enum logic {
    IDLE,
    SHIFT
  } state_t;

  state_t [BUFFER_SIZE - 1 : 0] current_state, next_state;

  always_ff @(posedge clk) begin : stateMachine
    for (int i = 0; i < BUFFER_SIZE; i++) begin
      if (rst) begin
        holding[i] <= 0;
        current_state[i] <= IDLE;
      end
      else begin
        current_state[i] <= next_state[i];
      end
    end
  end

  logic all_ingest, all_dispense;
  always_comb begin : nextStateLogic
    all_ingest = &holding;
    all_dispense = !&holding ;
    for(int i=0; i < BUFFER_SIZE; i++) begin
      if (all_ingest && current_state[i] == IDLE) begin // we want this to latch
        next_state[i] = SHIFT;
      end
      else if (all_dispense && current_state[i] == SHIFT) begin
        next_state[i] = IDLE;
      end
    end
  end

  always_comb begin : data_out_connections
      {%- for i in range(0, buffer_size) %}  
      data_out_{{i}} = register_{{i}};
      {%- endfor %}
  end
  logic all_shifting;
  assign all_shifting = &current_state;
  always_ff @( posedge clk ) begin : dataFlow
    {% for i in range(0, buffer_size) %}
    if (current_state[{{i}}] == IDLE) begin
      if (holding[{{i}}] == 1'b0) begin 
        data_out_valid_arr[{{i}}] <= 1'b0;
        data_in_ready_arr[{{i}}] <= 1'b1;
        if (data_in_valid_arr[{{i}}] == 1'b1 && data_in_ready_arr[{{i}}] == 1'b1) begin
          holding[{{i}}] <= 1'b1;
          register_{{i}} <= data_in_{{i}};
          data_in_ready_arr[{{i}}] <= 1'b0;
          data_out_valid_arr[{{i}}] <= 1'b1; 
        end
      end
      else begin 
        data_out_valid_arr[{{i}}] <= 1'b1;
        data_in_ready_arr[{{i}}] <= 1'b0;
        if (data_out_ready_arr[{{i}}] == 1'b1 && data_out_valid_arr[{{i}}] == 1'b1) begin
          holding[{{i}}] <= 1'b0;
          data_out_valid_arr[{{i}}] <= 1'b0;
          data_in_ready_arr[{{i}}] <= 1'b1;
        end
      end
    end
    {% endfor %}
    if (all_shifting) begin
    {%- for i in range(0, buffer_size) %}
      data_out_valid_arr[{{i}}] <= 1'b1;
      data_in_ready_arr[{{i}}] <= 1'b0;
    {%- endfor %}
      {% for i in range(0, buffer_size - 1) %}
      register_{{i}} <= register_{{i+1}};
      {%- endfor %}
      register_{{buffer_size - 1}} <= register_{{0}};
    end
  end

endmodule
