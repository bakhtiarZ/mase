// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module myproject_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s (
        ap_clk,
        ap_rst,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [15:0] p_read;
input  [15:0] p_read1;
input  [15:0] p_read2;
input  [15:0] p_read3;
input  [15:0] p_read4;
input  [15:0] p_read5;
input  [15:0] p_read6;
input  [15:0] p_read7;
input  [15:0] p_read8;
input  [15:0] p_read9;
output  [15:0] ap_return;
input   ap_ce;

reg[15:0] ap_return;

wire   [15:0] add_ln703_fu_761_p2;
reg   [15:0] add_ln703_reg_812;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [15:0] add_ln703_2_fu_773_p2;
reg   [15:0] add_ln703_2_reg_817;
wire   [15:0] add_ln703_7_fu_797_p2;
reg   [15:0] add_ln703_7_reg_822;
wire   [10:0] mul_i_i_0_fu_126_p1;
wire    ap_block_pp0_stage0;
wire   [10:0] mul_i_i_2_fu_127_p1;
wire   [8:0] mul_i_i_4_fu_128_p1;
wire   [10:0] mul_i_i_6_fu_129_p1;
wire   [10:0] mul_i_i_3_fu_130_p1;
wire   [10:0] mul_i_i_7_fu_131_p1;
wire   [9:0] mul_i_i_5_fu_132_p1;
wire  signed [10:0] mul_i_i_1_fu_133_p1;
wire  signed [10:0] mul_i_i_8_fu_134_p1;
wire  signed [9:0] mul_i_i_9_fu_135_p1;
wire   [25:0] mul_i_i_0_fu_126_p2;
wire   [25:0] mul_i_i_1_fu_133_p2;
wire   [25:0] mul_i_i_2_fu_127_p2;
wire   [25:0] mul_i_i_3_fu_130_p2;
wire   [24:0] mul_i_i_4_fu_128_p2;
wire   [14:0] tmp_fu_672_p4;
wire   [25:0] mul_i_i_5_fu_132_p2;
wire   [25:0] mul_i_i_6_fu_129_p2;
wire   [25:0] mul_i_i_7_fu_131_p2;
wire   [25:0] mul_i_i_8_fu_134_p2;
wire   [25:0] mul_i_i_9_fu_135_p2;
wire   [15:0] conv_i_i_i_1_fu_627_p4;
wire   [15:0] conv_i_i_i_fu_612_p4;
wire   [15:0] conv_i_i_i_3_fu_657_p4;
wire  signed [15:0] tmp_cast_fu_682_p1;
wire   [15:0] add_ln703_1_fu_767_p2;
wire   [15:0] conv_i_i_i_2_fu_642_p4;
wire   [15:0] conv_i_i_i_5_fu_691_p4;
wire   [15:0] conv_i_i_i_6_fu_706_p4;
wire   [15:0] conv_i_i_i_8_fu_736_p4;
wire   [15:0] conv_i_i_i_9_fu_751_p4;
wire   [15:0] add_ln703_5_fu_785_p2;
wire   [15:0] conv_i_i_i_7_fu_721_p4;
wire   [15:0] add_ln703_6_fu_791_p2;
wire   [15:0] add_ln703_4_fu_779_p2;
wire   [15:0] add_ln703_3_fu_803_p2;
wire   [15:0] add_ln703_8_fu_807_p2;
reg    ap_ce_reg;
reg   [15:0] ap_return_int_reg;

myproject_mul_16s_11ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_16s_11ns_26_1_1_U108(
    .din0(p_read),
    .din1(mul_i_i_0_fu_126_p1),
    .dout(mul_i_i_0_fu_126_p2)
);

myproject_mul_16s_11ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_16s_11ns_26_1_1_U109(
    .din0(p_read2),
    .din1(mul_i_i_2_fu_127_p1),
    .dout(mul_i_i_2_fu_127_p2)
);

myproject_mul_16s_9ns_25_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 25 ))
mul_16s_9ns_25_1_1_U110(
    .din0(p_read4),
    .din1(mul_i_i_4_fu_128_p1),
    .dout(mul_i_i_4_fu_128_p2)
);

myproject_mul_16s_11ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_16s_11ns_26_1_1_U111(
    .din0(p_read6),
    .din1(mul_i_i_6_fu_129_p1),
    .dout(mul_i_i_6_fu_129_p2)
);

myproject_mul_16s_11ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_16s_11ns_26_1_1_U112(
    .din0(p_read3),
    .din1(mul_i_i_3_fu_130_p1),
    .dout(mul_i_i_3_fu_130_p2)
);

myproject_mul_16s_11ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_16s_11ns_26_1_1_U113(
    .din0(p_read7),
    .din1(mul_i_i_7_fu_131_p1),
    .dout(mul_i_i_7_fu_131_p2)
);

myproject_mul_16s_10ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 26 ))
mul_16s_10ns_26_1_1_U114(
    .din0(p_read5),
    .din1(mul_i_i_5_fu_132_p1),
    .dout(mul_i_i_5_fu_132_p2)
);

myproject_mul_16s_11s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_16s_11s_26_1_1_U115(
    .din0(p_read1),
    .din1(mul_i_i_1_fu_133_p1),
    .dout(mul_i_i_1_fu_133_p2)
);

myproject_mul_16s_11s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 26 ))
mul_16s_11s_26_1_1_U116(
    .din0(p_read8),
    .din1(mul_i_i_8_fu_134_p1),
    .dout(mul_i_i_8_fu_134_p2)
);

myproject_mul_16s_10s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 26 ))
mul_16s_10s_26_1_1_U117(
    .din0(p_read9),
    .din1(mul_i_i_9_fu_135_p1),
    .dout(mul_i_i_9_fu_135_p2)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1))) begin
        add_ln703_2_reg_817 <= add_ln703_2_fu_773_p2;
        add_ln703_7_reg_822 <= add_ln703_7_fu_797_p2;
        add_ln703_reg_812 <= add_ln703_fu_761_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= add_ln703_8_fu_807_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = add_ln703_8_fu_807_p2;
    end
end

assign add_ln703_1_fu_767_p2 = ($signed(conv_i_i_i_3_fu_657_p4) + $signed(tmp_cast_fu_682_p1));

assign add_ln703_2_fu_773_p2 = (add_ln703_1_fu_767_p2 + conv_i_i_i_2_fu_642_p4);

assign add_ln703_3_fu_803_p2 = (add_ln703_2_reg_817 + add_ln703_reg_812);

assign add_ln703_4_fu_779_p2 = (conv_i_i_i_5_fu_691_p4 + conv_i_i_i_6_fu_706_p4);

assign add_ln703_5_fu_785_p2 = (conv_i_i_i_8_fu_736_p4 + conv_i_i_i_9_fu_751_p4);

assign add_ln703_6_fu_791_p2 = (add_ln703_5_fu_785_p2 + conv_i_i_i_7_fu_721_p4);

assign add_ln703_7_fu_797_p2 = (add_ln703_6_fu_791_p2 + add_ln703_4_fu_779_p2);

assign add_ln703_8_fu_807_p2 = (add_ln703_7_reg_822 + add_ln703_3_fu_803_p2);

assign add_ln703_fu_761_p2 = (conv_i_i_i_1_fu_627_p4 + conv_i_i_i_fu_612_p4);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign conv_i_i_i_1_fu_627_p4 = {{mul_i_i_1_fu_133_p2[25:10]}};

assign conv_i_i_i_2_fu_642_p4 = {{mul_i_i_2_fu_127_p2[25:10]}};

assign conv_i_i_i_3_fu_657_p4 = {{mul_i_i_3_fu_130_p2[25:10]}};

assign conv_i_i_i_5_fu_691_p4 = {{mul_i_i_5_fu_132_p2[25:10]}};

assign conv_i_i_i_6_fu_706_p4 = {{mul_i_i_6_fu_129_p2[25:10]}};

assign conv_i_i_i_7_fu_721_p4 = {{mul_i_i_7_fu_131_p2[25:10]}};

assign conv_i_i_i_8_fu_736_p4 = {{mul_i_i_8_fu_134_p2[25:10]}};

assign conv_i_i_i_9_fu_751_p4 = {{mul_i_i_9_fu_135_p2[25:10]}};

assign conv_i_i_i_fu_612_p4 = {{mul_i_i_0_fu_126_p2[25:10]}};

assign mul_i_i_0_fu_126_p1 = 26'd541;

assign mul_i_i_1_fu_133_p1 = 26'd67108292;

assign mul_i_i_2_fu_127_p1 = 26'd538;

assign mul_i_i_3_fu_130_p1 = 26'd667;

assign mul_i_i_4_fu_128_p1 = 25'd176;

assign mul_i_i_5_fu_132_p1 = 26'd381;

assign mul_i_i_6_fu_129_p1 = 26'd743;

assign mul_i_i_7_fu_131_p1 = 26'd583;

assign mul_i_i_8_fu_134_p1 = 26'd67108280;

assign mul_i_i_9_fu_135_p1 = 26'd67108441;

assign tmp_cast_fu_682_p1 = $signed(tmp_fu_672_p4);

assign tmp_fu_672_p4 = {{mul_i_i_4_fu_128_p2[24:10]}};

endmodule //myproject_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s
